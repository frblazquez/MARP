/*
*   Francisco Javier Blázquez Martínez ~ frblazqu@ucm.es
*
*   Double degree in Mathematics - Computer Engineering
*   Complutense University, Madrid
*
*   Description: Index for the exercises solved.
*/

-> TREES:
    + Problem 10: Is a tree balanced?
      The recursive method implemented follows directly the recursive definition
      of balanced tree.
    + Problem 11: Is an AVL tree?
      Recursive method derived from the recursive definition of the AVL condition.
    + Problem 12: Keys in a range given.
      This problem is much more didactic if it's done modifying a BST data struc-
      ture. It's easily done with a variation of search algorithm.
    + Problem 13: Kth element in a BST.
      This problem is designed for adding a new attribute in each node of a BST
      data structure to keep the number of descending nodes. Then a variation of
      the BST search allows us to find the solution.
      
-> HEAPS:
    + Problem 20: Minimise adding cost.
      This problem combines heaps and a greedy algorithm to find the solution.
      We just add always the minimal numbers.
    + Problem 21: Simulation of data sending.
      We use in this problem a heap to execute the simulation with a low complexity.
    + Problem 22: Simulation of a hospital consultation.
      We execute the simulation the number of steps required keeping the concor-
      dance adding or removing elements from the heap.
    + Problem 23: Are some tasks overlaped?
      We again use a greedy algorithm and a heap to have data ordenation with low
      algorithm complexity.
    + Problem 24: Keep the median of a set of numbers during insertions.
      For this problem we use two heaps, a max-heap and min-heap to maintain an
      invariant of equal size for having the median at the top of min-heap.
      
-> GRAPHS:
    + Problem 30: Transitive closure, maximum size of a conected component.
      This problem can easily be solved with a few modifications in BFS or DFS
      algorithms.
    + Problem 31: Determinate wether a graph is bipartite or not.
      This problem requires a DFS (or BFS) algorithm with a modification on the
      mark system.
    + Problem 32: Snakes and stairs.
      We explore all possibles cells we can reach in an increasing number of 
      movements until we reach last cell.
    + Problem 33: White - Black sheeps.
      Connected components problem. Can be implemented with a boolean matrix 
      because there are just two elements presents.
    + Problem 34: Oil tanker problem.
      Connected components problem during insertions. Uses Union-find schema with
      path compression and size control for the solution.
    + Problem 35: Squirrel problem.
      For solving this problem we put the trees in reverse order they were cut
      until we connect both ends. We use Union-find schema. Distance used in this
      problem is euclidean distance!
    + Problem 36: Going from a point to other using only big-enough edges.
      This problem is implemented with a variation of DFS algorithm. However is
      much more efficient to use Dijsktra algorithm.
    + Problem 37: Connecting all the islands.
      Minimum spanning tree problem. This can be solved with Dijsktra algorithm
      but it's even better Kruskal or Prim algorithms.
    + Problem 38: Minimum distance from a node to all the others.
      Again, Dijsktra algorithm is omnipresent. It's the simplest and most effec-
      tive way for knowing distance from a vertex to all others.
    + Problem 39: Minimum cost for a messenger to do it's journey.
      Two Dijsktra algorithm execution. We keep the graph and the reverse graph.
      Dijkstra 1 let us know minimum cost of going from start to every node and
      Dijkstra 2 let us know minimum cost of going back from every node to start.




